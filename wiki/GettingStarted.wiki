#summary 快速开发指南
<wiki:toc max_depth="2" />

= 简介 =
Comet4J是一个微型的即时推送框架，它分为服务端与客户端两部分，你只要将服务器端(JAR文件，目前仅支持Tomcat6、7)放入WEB-INF\lib，客户端(JavaScript?文件)引入到页面，那么你的应用就具备了向客户端推送信息的能力，而你仅需要在服务器端调用Comet4J所提供发送方法，信息就会被主动的推送到客户的浏览器上。
= 准备工作 =
== 下载服务端jar文件 ==
  Comet4J目前仅支持Tomcat6、7版本，根据您所使用的Tomcat版本下载【comet4j-tomcat6-x.jar】或【comet4j-tomcat7-x.jar】文件放置到WEB项目的WEB-INF\lib目录下。
== 下载客户端js文件 ==
  下载【comet4j-0.0.2-x.js】到您的项目中，比如：WebContent\js目录下。
== 修改服务器配置文件 ==
  因为Comet4J工作在NIO方式下，所以我们需要调整服务器连接器配置，更换为NOI连接器。
  打开server.xml文件将找到原先的连接器配置：
  {{{
  <Connector executor="tomcatThreadPool" port="8080" protocol="HTTP/1.1" connectionTimeout="20000" redirectPort="8443" />
  }}}
  替换为：
  {{{
  <Connector URIEncoding="UTF-8" connectionTimeout="20000" port="8080" protocol="org.apache.coyote.http11.Http11NioProtocol" redirectPort="8443"/>
  }}}
== 在web.xml中加载Comet4J框架 ==
  最后我们需要在web.xml配置侦听和comet连接地址，以使Comet4J生效：
  {{{
  <listener>
    <description>Comet4J容器侦听</description>
    <listener-class>org.comet4j.core.CometAppListener</listener-class>
  </listener>
  <servlet>
    <description>Comet连接[默认:org.comet4j.core.CometServlet]</description>
    <display-name>CometServlet</display-name>
    <servlet-name>CometServlet</servlet-name>
    <servlet-class>org.comet4j.core.CometServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>CometServlet</servlet-name>
    <url-pattern>/conn</url-pattern>
  </servlet-mapping>
  }}}
  这里是最小化配置，更多配置请参见【更多资料】。至此所有的准备工作已经就绪，现在让我们来开发一个HelloWorld吧！
= HelloWorld =  
我们利用Comet4J开发一个每隔一秒向所有客户端推送服务器JVM的剩余内存大小。
== 客户端 ==
  helloworld.html
  {{{
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<title>Comet4J Hello World</title>
<script type="text/javascript" src="js/comet4j-0.0.2.js"></script>
<script type="text/javascript">
function init(){
	var kbDom = document.getElementById('kb');
	JS.Engine.on({
		hello : function(kb){//侦听一个channel
			kbDom.innerHTML = kb;
		}
	});
	JS.Engine.start('conn');
}
</script>
</head>
<body onload="init()">
	JVM剩余内存：<span id="kb">...</span>KB
</body>
</html>
  }}}
== 服务器端 ==
  helloworld.java
  {{{
package org.comet4j.demo.helloworld;

import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;

import org.comet4j.core.CometContext;
import org.comet4j.core.CometEngine;

public class HelloWorld implements ServletContextListener {
	private static final String CHANNEL = "hello";
	public void contextInitialized(ServletContextEvent arg0) {
		CometContext cc = CometContext.getInstance();
		cc.registChannel(CHANNEL);//注册应用的channel
		Thread helloAppModule = new Thread(new HelloAppModule(), "Sender App Module");
		helloAppModule.setDaemon(true);
		helloAppModule.start();

	}

	class HelloAppModule implements Runnable {
		public void run() {
			while (true) {
				try {
					Thread.sleep(1000);
				} catch (Exception ex) {
					ex.printStackTrace();
				}
				CometEngine engine = CometContext.getInstance().getEngine();
				engine.sendTo(CHANNEL, engine.getConnections(), Runtime.getRuntime().freeMemory()/1024);
			}
		}
	}

	public void contextDestroyed(ServletContextEvent arg0) {

	}

}
  }}}
最后不要忘记在web.xml中配置侦听，使您的应用生效。
  {{{
<listener>
  <description>HelloWorld</description>
  <listener-class>org.comet4j.demo.helloworld.HelloWorld</listener-class>
</listener>
  }}}

= 更多资料 =
== Demo体验 ==
http://comet4j.axiao.org:8080/
== 客户端API ==
== 服务器端API ==
== Comet4J配置参数表 ==
{{{
	<!-- Comet4J配置可选参数配置-->
	<context-param>
		<description>语言[目前只支持：zh,en两种,默认:zh，详细http://www.loc.gov/standards/iso639-2/php/English_list.php]</description>
		<param-name>Comet.Language</param-name>
		<param-value>zh</param-value>
	</context-param>
	<context-param>
		<description>请求超时时间/毫秒[默认:60000,1分钟,建议至少设置3秒以上]</description>
		<param-name>Comet.Timeout</param-name>
		<param-value>1800000</param-value>
	</context-param>
	<context-param>
		<description>连接空闲过期时间/毫秒[默认:60000,1分钟]</description>
		<param-name>Comet.ConnExpires</param-name>
		<param-value>5000</param-value>
	</context-param>
	<context-param>
		<description>连接检查频率/毫秒[默认:60000,1分钟]</description>
		<param-name>Comet.ConnFrequency</param-name>
		<param-value>5000</param-value>
	</context-param>
	<context-param>
		<description>缓存信息过期时间/毫秒[默认:3600000,1小时]</description>
		<param-name>Comet.CacheExpires</param-name>
		<param-value>60000</param-value>
	</context-param>
	<context-param>
		<description>缓存信息过期检查频率/毫秒[默认:3600000,1小时]</description>
		<param-name>Comet.CacheFrequency</param-name>
		<param-value>1800000</param-value>
	</context-param>
	<context-param>
		<description>连接模式[auto(默认)/stream/lpool]</description>
		<param-name>Comet.WorkStyle</param-name>
		<param-value>auto</param-value>
	</context-param>
	<context-param>
		<description>开启调试[false(默认)/true]</description>
		<param-name>Comet.Debug</param-name>
		<param-value>true</param-value>
	</context-param>
  }}}
== Tomcat6实例 ==
使用SVN检出：https://comet4j.googlecode.com/svn/trunk/comet4j-tomcat6-demo-war
== Tomcat7实例 ==
使用SVN检出：https://comet4j.googlecode.com/svn/trunk/comet4j-tomcat7-demo-war

更多资料等待您的探索与分享...